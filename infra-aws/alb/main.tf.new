locals {
  name_prefix = "${var.project}-${var.environment}"
  alb_name    = var.alb_name != "" ? var.alb_name : "${local.name_prefix}-alb"
}

# Main ALB
resource "aws_lb" "main" {
  count = var.create_main_alb ? 1 : 0

  name               = local.alb_name
  internal           = false
  load_balancer_type = "application"
  security_groups    = [var.alb_security_group_id]
  subnets           = var.public_subnet_ids

  tags = {
    Name        = local.alb_name
    Environment = var.environment
    Project     = var.project
    ManagedBy   = "terraform"
  }
}

# HTTP Listener (redirects to HTTPS)
resource "aws_lb_listener" "http" {
  count = var.create_main_alb ? 1 : 0

  load_balancer_arn = aws_lb.main[0].arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type = "redirect"

    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}

# HTTPS Listener
resource "aws_lb_listener" "https" {
  count = var.create_main_alb ? 1 : 0

  load_balancer_arn = aws_lb.main[0].arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = var.certificate_arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.main[0].arn
  }
}

# Main Target Group
resource "aws_lb_target_group" "main" {
  count = var.create_main_alb ? 1 : 0

  name        = "${local.name_prefix}-tg"
  port        = var.target_port
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "ip"

  health_check {
    enabled             = true
    healthy_threshold   = 2
    interval            = 30
    matcher            = "200"
    path               = var.healthcheck_path
    port               = "traffic-port"
    protocol           = "HTTP"
    timeout            = 10
    unhealthy_threshold = 5
  }

  tags = {
    Name        = "${local.name_prefix}-tg"
    Environment = var.environment
    Project     = var.project
    ManagedBy   = "terraform"
  }
}

# Services ALB
resource "aws_lb" "secondary" {
  name               = "${local.name_prefix}-alb-services"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [var.alb_security_group_id]
  subnets           = var.public_subnet_ids

  tags = {
    Name        = "${local.name_prefix}-alb-services"
    Environment = var.environment
    Project     = var.project
    ManagedBy   = "terraform"
  }
}

# Services ALB HTTP Listener (port 8080)
resource "aws_lb_listener" "secondary_http_8080" {
  load_balancer_arn = aws_lb.secondary.arn
  port              = "8080"
  protocol          = "HTTP"

  default_action {
    type = "fixed-response"

    fixed_response {
      content_type = "text/plain"
      message_body = "Service temporarily unavailable"
      status_code  = "503"
    }
  }
}

# Services ALB Target Group
resource "aws_lb_target_group" "secondary_8080" {
  name        = "${local.name_prefix}-tg-services-8080"
  port        = var.target_port
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"  # Changed from "ip" to "instance" for EC2 targets

  health_check {
    enabled             = true
    healthy_threshold   = 2
    interval            = 30
    matcher            = "200"
    path               = var.healthcheck_path
    port               = "traffic-port"
    protocol           = "HTTP"
    timeout            = 10
    unhealthy_threshold = 5
  }

  tags = {
    Name        = "${local.name_prefix}-tg-services-8080"
    Environment = var.environment
    Project     = var.project
    ManagedBy   = "terraform"
  }
}

# Target Group Attachment
resource "aws_lb_target_group_attachment" "secondary_8080" {
  count            = length(var.target_instance_ids)
  target_group_arn = aws_lb_target_group.secondary_8080.arn
  target_id        = var.target_instance_ids[count.index]
  port             = var.target_port
}

# Listener Rule to forward traffic to the target group
resource "aws_lb_listener_rule" "forward_to_target_group" {
  listener_arn = aws_lb_listener.secondary_http_8080.arn
  priority     = 1

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.secondary_8080.arn
  }

  condition {
    path_pattern {
      values = ["/*"]
    }
  }
}

# CloudWatch Alarms
resource "aws_cloudwatch_metric_alarm" "alb_4xx" {
  alarm_name          = "${local.name_prefix}-alb-4xx"
  alarm_description   = "This metric monitors ALB 4XX errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 2
  metric_name        = "HTTPCode_ELB_4XX_Count"
  namespace          = "AWS/ApplicationELB"
  period             = 300
  statistic          = "Sum"
  threshold          = 50
  alarm_actions      = [aws_sns_topic.alarms.arn]

  dimensions = {
    LoadBalancer = aws_lb.secondary.arn_suffix
  }

  tags = {
    Name        = "${local.name_prefix}-alb-4xx-alarm"
    Environment = var.environment
    Project     = var.project
    ManagedBy   = "terraform"
  }
}

resource "aws_cloudwatch_metric_alarm" "alb_5xx" {
  alarm_name          = "${local.name_prefix}-alb-5xx"
  alarm_description   = "This metric monitors ALB 5XX errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 2
  metric_name        = "HTTPCode_ELB_5XX_Count"
  namespace          = "AWS/ApplicationELB"
  period             = 300
  statistic          = "Sum"
  threshold          = 10
  alarm_actions      = [aws_sns_topic.alarms.arn]

  dimensions = {
    LoadBalancer = aws_lb.secondary.arn_suffix
  }

  tags = {
    Name        = "${local.name_prefix}-alb-5xx-alarm"
    Environment = var.environment
    Project     = var.project
    ManagedBy   = "terraform"
  }
}

resource "aws_cloudwatch_metric_alarm" "alb_latency" {
  alarm_name          = "${local.name_prefix}-alb-latency"
  alarm_description   = "This metric monitors ALB target response time"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 2
  metric_name        = "TargetResponseTime"
  namespace          = "AWS/ApplicationELB"
  period             = 300
  statistic          = "Average"
  threshold          = 5
  alarm_actions      = [aws_sns_topic.alarms.arn]

  dimensions = {
    LoadBalancer = aws_lb.secondary.arn_suffix
  }

  tags = {
    Name        = "${local.name_prefix}-alb-latency-alarm"
    Environment = var.environment
    Project     = var.project
    ManagedBy   = "terraform"
  }
}

# SNS Topic for Alarms
resource "aws_sns_topic" "alarms" {
  name = "${local.name_prefix}-alarms"

  tags = {
    Name        = "${local.name_prefix}-alarms"
    Environment = var.environment
    Project     = var.project
    ManagedBy   = "terraform"
  }
}

# SNS Topic Policy
resource "aws_sns_topic_policy" "alarms" {
  arn = aws_sns_topic.alarms.arn

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "cloudwatch.amazonaws.com"
        }
        Action   = "SNS:Publish"
        Resource = aws_sns_topic.alarms.arn
      }
    ]
  })
} 