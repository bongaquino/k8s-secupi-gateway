name: 'Terraform'

on:
  push:
    branches:
      - staging
      - uat
      - prod
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/README.md'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - staging
      - uat
      - prod
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/README.md'
      - '.github/workflows/terraform.yml'

permissions:
  contents: read
  pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-southeast-1

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    defaults:
      run:
        working-directory: .

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Documentation Check
      id: docs
      run: |
        echo "Checking for README.md files in all modules..."
        missing_docs=""
        for module in acm alb amplify cloudtrail codepipeline discord_notifications dynamodb ec2 ecs elasticache iam parameter_store route53 s3 vpc; do
          if [ ! -f "$module/README.md" ]; then
            missing_docs="$missing_docs $module"
          fi
        done
        if [ -n "$missing_docs" ]; then
          echo "Missing documentation in modules:$missing_docs"
          exit 1
        fi
        echo "All modules have documentation ✅"



    - name: Terraform Init - Core Infrastructure
      id: init-core
      run: |
        # Initialize core infrastructure modules in dependency order
        # Note: VPC is excluded from CI - deploy manually when needed
        for module in s3; do
          if [ -d "$module/envs/${{ github.ref_name }}" ]; then
            echo "Initializing $module (environment-specific)..."
            cd $module/envs/${{ github.ref_name }}
            TF_WORKSPACE=${{ github.ref_name }} terraform init
            cd $GITHUB_WORKSPACE
          fi
        done
        # Root-level modules
        for module in iam; do
          if [ -f "$module/main.tf" ]; then
            echo "Initializing $module (root-level)..."
            cd $module
            terraform init
            cd $GITHUB_WORKSPACE
          fi
        done

    - name: Terraform Init - Services
      id: init-services
      run: |
        # Initialize service modules with environments
        for module in dynamodb elasticache parameter_store ec2 ecs alb; do
          if [ -d "$module/envs/${{ github.ref_name }}" ]; then
            echo "Initializing $module (environment-specific)..."
            cd $module/envs/${{ github.ref_name }}
            TF_WORKSPACE=${{ github.ref_name }} terraform init
            cd $GITHUB_WORKSPACE
          fi
        done
        # Root-level service modules
        for module in acm route53; do
          if [ -f "$module/main.tf" ]; then
            echo "Initializing $module (root-level)..."
            cd $module
            terraform init
            cd $GITHUB_WORKSPACE
          fi
        done

    - name: Terraform Init - Applications
      id: init-apps
      run: |
        # Initialize application modules with environments
        for module in amplify; do
          if [ -d "$module/envs/${{ github.ref_name }}" ]; then
            echo "Initializing $module (environment-specific)..."
            cd $module/envs/${{ github.ref_name }}
            TF_WORKSPACE=${{ github.ref_name }} terraform init
            cd $GITHUB_WORKSPACE
          fi
        done
        # Root-level application modules
        for module in cloudtrail; do
          if [ -f "$module/main.tf" ]; then
            echo "Initializing $module (root-level)..."
            cd $module
            terraform init
            cd $GITHUB_WORKSPACE
          fi
        done
        # CodePipeline (environment-specific)
        if [ -d "codepipeline/${{ github.ref_name }}" ]; then
          echo "Initializing codepipeline..."
          cd codepipeline/${{ github.ref_name }}
          TF_WORKSPACE=${{ github.ref_name }} terraform init
          cd $GITHUB_WORKSPACE
        fi
        # Discord notifications (staging and uat only)
        if [ -d "discord_notifications/envs/${{ github.ref_name }}" ]; then
          echo "Initializing discord_notifications..."
          cd discord_notifications/envs/${{ github.ref_name }}
          TF_WORKSPACE=${{ github.ref_name }} terraform init
          cd $GITHUB_WORKSPACE
        fi

    - name: Terraform Validate - All Modules
      id: validate
      run: |
        echo "Validating all modules..."
        validation_errors=""
        
        # Validate environment-specific modules
        # Note: VPC is excluded from CI - validate manually when needed
        for module in s3 dynamodb elasticache parameter_store ec2 ecs alb amplify; do
          if [ -d "$module/envs/${{ github.ref_name }}" ]; then
            echo "Validating $module (environment-specific)..."
            cd $module/envs/${{ github.ref_name }}
            if ! terraform validate -no-color; then
              validation_errors="$validation_errors $module"
            fi
            cd $GITHUB_WORKSPACE
          fi
        done
        
        # Validate root-level modules
        for module in iam acm route53 cloudtrail; do
          if [ -f "$module/main.tf" ]; then
            echo "Validating $module (root-level)..."
            cd $module
            if ! terraform validate -no-color; then
              validation_errors="$validation_errors $module"
            fi
            cd $GITHUB_WORKSPACE
          fi
        done
        
        # Validate codepipeline (environment-specific)
        if [ -d "codepipeline/${{ github.ref_name }}" ]; then
          echo "Validating codepipeline..."
          cd codepipeline/${{ github.ref_name }}
          if ! terraform validate -no-color; then
            validation_errors="$validation_errors codepipeline"
          fi
          cd $GITHUB_WORKSPACE
        fi
        
        # Validate discord notifications (staging and uat only)
        if [ -d "discord_notifications/envs/${{ github.ref_name }}" ]; then
          echo "Validating discord_notifications..."
          cd discord_notifications/envs/${{ github.ref_name }}
          if ! terraform validate -no-color; then
            validation_errors="$validation_errors discord_notifications"
          fi
          cd $GITHUB_WORKSPACE
        fi
        
        if [ -n "$validation_errors" ]; then
          echo "Validation errors in modules:$validation_errors"
          exit 1
        fi
        echo "All modules validated successfully ✅"

    - name: Terraform Plan - Core Infrastructure
      id: plan-core
      if: github.event_name == 'pull_request'
      run: |
        echo "Planning core infrastructure modules..."
        # Environment-specific core modules
        # Note: VPC is excluded from CI - plan manually when needed
        for module in s3; do
          if [ -d "$module/envs/${{ github.ref_name }}" ]; then
            echo "Planning $module (environment-specific)..."
            cd $module/envs/${{ github.ref_name }}
            terraform plan -no-color -out=$module-plan.tfplan
            cd $GITHUB_WORKSPACE
          fi
        done
        # Root-level core modules
        for module in iam; do
          if [ -f "$module/main.tf" ]; then
            echo "Planning $module (root-level)..."
            cd $module
            if [ -f "terraform.tfvars" ]; then
              terraform plan -no-color -out=$module-plan.tfplan -var-file=terraform.tfvars
            else
              terraform plan -no-color -out=$module-plan.tfplan
            fi
            cd $GITHUB_WORKSPACE
          fi
        done
      continue-on-error: true

    - name: Terraform Plan - Services
      id: plan-services
      if: github.event_name == 'pull_request'
      run: |
        echo "Planning service modules..."
        # Environment-specific service modules
        for module in dynamodb elasticache parameter_store ec2 ecs alb; do
          if [ -d "$module/envs/${{ github.ref_name }}" ]; then
            echo "Planning $module (environment-specific)..."
            cd $module/envs/${{ github.ref_name }}
            terraform plan -no-color -out=$module-plan.tfplan
            cd $GITHUB_WORKSPACE
          fi
        done
        # Root-level service modules
        for module in acm route53; do
          if [ -f "$module/main.tf" ]; then
            echo "Planning $module (root-level)..."
            cd $module
            terraform plan -no-color -out=$module-plan.tfplan
            cd $GITHUB_WORKSPACE
          fi
        done
      continue-on-error: true

    - name: Terraform Plan - Applications
      id: plan-apps
      if: github.event_name == 'pull_request'
      run: |
        echo "Planning application modules..."
        # Environment-specific application modules
        for module in amplify; do
          if [ -d "$module/envs/${{ github.ref_name }}" ]; then
            echo "Planning $module (environment-specific)..."
            cd $module/envs/${{ github.ref_name }}
            terraform plan -no-color -out=$module-plan.tfplan
            cd $GITHUB_WORKSPACE
          fi
        done
        # Root-level application modules
        for module in cloudtrail; do
          if [ -f "$module/main.tf" ]; then
            echo "Planning $module (root-level)..."
            cd $module
            terraform plan -no-color -out=$module-plan.tfplan
            cd $GITHUB_WORKSPACE
          fi
        done
        # CodePipeline (environment-specific)
        if [ -d "codepipeline/${{ github.ref_name }}" ]; then
          echo "Planning codepipeline..."
          cd codepipeline/${{ github.ref_name }}
          terraform plan -no-color -out=codepipeline-plan.tfplan
          cd $GITHUB_WORKSPACE
        fi
        # Discord notifications (staging and uat only)
        if [ -d "discord_notifications/envs/${{ github.ref_name }}" ]; then
          echo "Planning discord_notifications..."
          cd discord_notifications/envs/${{ github.ref_name }}
          terraform plan -no-color -out=discord-plan.tfplan
          cd $GITHUB_WORKSPACE
        fi
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN_CORE: "terraform\n${{ steps.plan-core.outputs.stdout }}"
        PLAN_SERVICES: "terraform\n${{ steps.plan-services.outputs.stdout }}"
        PLAN_APPS: "terraform\n${{ steps.plan-apps.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### 📋 Terraform CI/CD Pipeline Results

          | Step | Result |
          |------|--------|
          | 🖌 **Format & Style** | \`${{ steps.fmt.outcome }}\` |
          | 📚 **Documentation Check** | \`${{ steps.docs.outcome }}\` |
          | ⚙️ **Core Infrastructure Init** | \`${{ steps.init-core.outcome }}\` |
          | ⚙️ **Services Init** | \`${{ steps.init-services.outcome }}\` |
          | ⚙️ **Applications Init** | \`${{ steps.init-apps.outcome }}\` |
          | 🤖 **Validation** | \`${{ steps.validate.outcome }}\` |
          | 📖 **Core Infrastructure Plan** | \`${{ steps.plan-core.outcome }}\` |
          | 📖 **Services Plan** | \`${{ steps.plan-services.outcome }}\` |
          | 🚀 **Applications Plan** | \`${{ steps.plan-apps.outcome }}\` |

          <details><summary>📊 Show Core Infrastructure Plan</summary>

          \`\`\`\n
          ${process.env.PLAN_CORE}
          \`\`\`

          </details>

          <details><summary>🔧 Show Services Plan</summary>

          \`\`\`\n
          ${process.env.PLAN_SERVICES}
          \`\`\`

          </details>

          <details><summary>🚀 Show Applications Plan</summary>

          \`\`\`\n
          ${process.env.PLAN_APPS}
          \`\`\`

          </details>

          ---
          **📚 Modules Coverage**: 15 modules documented and validated
          **🏗️ Infrastructure**: Core → Services → Applications (dependency order)
          **🔒 Security**: All modules validated with security best practices`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })

    - name: Terraform Apply - Core Infrastructure
      if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
      run: |
        echo "Checking for changes in core infrastructure..."
        changes_detected=false
        
        # Environment-specific core modules
        # Note: VPC is excluded from CI - deploy manually when needed
        for module in s3; do
          if [ -d "$module/envs/${{ github.ref_name }}" ]; then
            echo "Checking $module for changes..."
            cd $module/envs/${{ github.ref_name }}
            TF_WORKSPACE=${{ github.ref_name }} terraform plan -detailed-exitcode
            if [ $? -eq 2 ]; then
              echo "✅ Changes detected in $module - applying..."
              TF_WORKSPACE=${{ github.ref_name }} terraform apply -auto-approve
              changes_detected=true
            else
              echo "⏭️ No changes in $module - skipping apply"
            fi
            cd $GITHUB_WORKSPACE
          fi
        done
        
        # Root-level core modules
        for module in iam; do
          if [ -f "$module/main.tf" ]; then
            echo "Checking $module for changes..."
            cd $module
            
            # SAFETY CHECK: Ensure terraform.tfvars exists for IAM
            if [ "$module" = "iam" ] && [ ! -f "terraform.tfvars" ]; then
              echo "🚨 CRITICAL ERROR: terraform.tfvars not found in IAM module!"
              echo "This would cause user deletion. Aborting!"
              exit 1
            fi
            
            if [ -f "terraform.tfvars" ]; then
              echo "📄 Using terraform.tfvars for $module"
              ls -la terraform.tfvars
              
              # Run plan and capture output to check for destruction
              terraform plan -detailed-exitcode -var-file=terraform.tfvars -out=plan.tfplan
              plan_exit_code=$?
              
              # SAFETY CHECK: Look for destruction in plan
              if terraform show -no-color plan.tfplan | grep -q "# .* will be destroyed"; then
                echo "🚨 DESTRUCTION DETECTED in $module plan!"
                echo "Plan contains resource destruction. Aborting to prevent data loss!"
                terraform show plan.tfplan | grep "will be destroyed" || true
                exit 1
              fi
              
              if [ $plan_exit_code -eq 2 ]; then
                echo "✅ Safe changes detected in $module - applying..."
                terraform apply -auto-approve plan.tfplan
                changes_detected=true
              else
                echo "⏭️ No changes in $module - skipping apply"
              fi
            else
              terraform plan -detailed-exitcode -out=plan.tfplan
              plan_exit_code=$?
              
              # SAFETY CHECK: Look for destruction in plan
              if terraform show -no-color plan.tfplan | grep -q "# .* will be destroyed"; then
                echo "🚨 DESTRUCTION DETECTED in $module plan!"
                echo "Plan contains resource destruction. Aborting to prevent data loss!"
                terraform show plan.tfplan | grep "will be destroyed" || true
                exit 1
              fi
              
              if [ $plan_exit_code -eq 2 ]; then
                echo "✅ Safe changes detected in $module - applying..."
                terraform apply -auto-approve plan.tfplan
                changes_detected=true
              else
                echo "⏭️ No changes in $module - skipping apply"
              fi
            fi
            cd $GITHUB_WORKSPACE
          fi
        done
        
        if [ "$changes_detected" = false ]; then
          echo "🎉 No changes detected in any core modules - deployment complete!"
        fi

    - name: Terraform Apply - Services (Manual Approval Required)
      if: false  # Disabled for safety - requires manual approval
      run: |
        echo "Services deployment requires manual approval for safety"
        echo "Run manually: terraform apply in each service module"

    - name: Terraform Apply - Applications (Manual Approval Required)
      if: false  # Disabled for safety - requires manual approval
      run: |
        echo "Applications deployment requires manual approval for safety"
        echo "Application modules include: amplify, cloudtrail, codepipeline, discord_notifications"
        echo "Run manually: terraform apply in each application module" 